# -*- coding: utf-8 -*-
"""Word Bytes Solver.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iMO0YFMhp-9fcBiKrUNN1C1_C4t5fkjF
"""

import itertools as it
import nltk
nltk.download('words')


def checkConsonants(word):
  vowels = ["a", "e", "i", "o", "u"]
  consonants = 0
  for character in word:
    if character in vowels:
      consonants = 0
    else:
      consonants = consonants + 1
    if consonants == 5:
      return False
  return True

HorizontalBytes = []
VerticalBytes = []
Bytes = []

val = "sdfdsaf"

while (1):
  val = input("Enter next HorizontalBytes: ")
  if val == "":
    break
  HorizontalBytes.append(val)

while(1):
  val = input("Enter next VerticalBytes: ")
  if val == "":
    break
  VerticalBytes.append(val)

while(1):
  val = input("Enter single Bytes: ")
  if val == "":
    break
  Bytes.append(val)

#from nltk.probability import DictionaryConditionalProbDist
HorizontalSingles = []
#this organizes possible single combinations for horizontal lines
combinations = []
for i in range(2**(len(VerticalBytes))):
  combination = bin(i)[2:len(bin(i))]
  zeros = len(VerticalBytes)-len(combination)
  for j in range(zeros):
    combination = "0"+combination
  combinations.append(combination)

for i in range(len(combinations)):
  temp = []
  for j in range(len(VerticalBytes)):
    temp.append(VerticalBytes[j][int(combinations[i][j])])
  HorizontalSingles.append(temp)


VerticalSingles = []

#this organizes possible single combinations for vertical lines
combinations = []
for i in range(2**(len(HorizontalBytes))):
  combination = bin(i)[2:len(bin(i))]
  zeros = len(HorizontalBytes)-len(combination)
  for j in range(zeros):
    combination = "0"+combination
  combinations.append(combination)

for i in range(len(combinations)):
  temp = []
  for j in range(len(HorizontalBytes)):
    temp.append(HorizontalBytes[j][int(combinations[i][j])])
  VerticalSingles.append(temp)




possibleStrings = set()
separator = ""
for i in range(3,7):
  for j in range(len(VerticalSingles)):
    stuff = list(it.permutations(VerticalBytes+VerticalSingles[j]+Bytes,i))
    for item in stuff:
      possibleStrings.add(separator.join(item))


for i in range(3,7):
  for j in range(len(HorizontalSingles)):
    stuff = list(it.permutations(HorizontalBytes+HorizontalSingles[j]+Bytes,i))
    for item in stuff:
      possibleStrings.add(separator.join(item))
print(len(possibleStrings))


from nltk.corpus import words

dictionary = dict.fromkeys(words.words(), None)
correctStrings = []
for item in possibleStrings:
  if item in dictionary:
    correctStrings.append(item)
new = sorted(correctStrings, key=lambda x: len(x), reverse = True)
print(new)
print(len(new))